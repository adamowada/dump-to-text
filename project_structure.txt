Tree of project `dump-to-text`:

```bash
├── README.md
├── requirements.txt
└── text
```

Contents of `dump-to-text/text`:

```
#!/home/adamo/projects/dump-to-text/.venv/bin/python
import os
import argparse
import pyperclip


IGNORE_DIRS = {".venv", "nodemon", ".idea", ".git"}
EXTENSIONS = {
    ".py": "python",
    ".md": "markdown",
    ".js": "javascript",
    ".text": "text",
    ".css": "css",
    ".json": "json",
    ".html": "html",
}


def list_directory(path, prefix=""):
    tree_str = ""
    files = sorted([f for f in os.listdir(path) if not f.startswith(".") and f != "nodemon"])
    num_files = len(files)

    for index, file in enumerate(files):
        file_path = os.path.join(path, file)

        # Determine the correct prefix for the current file or directory
        if index == num_files - 1:
            tree_str += prefix + "└── " + file + "\n"
            next_prefix = prefix + "    "
        else:
            tree_str += prefix + "├── " + file + "\n"
            next_prefix = prefix + "│   "

        # Recursively list subdirectories
        if os.path.isdir(file_path):
            tree_str += list_directory(file_path, next_prefix)

    return tree_str


def read_file_content(file_path):
    try:
        with open(file_path, "r") as file:
            return file.read()
    except Exception as e:
        return f"Error reading file: {e}"


def is_utf8_text_file(file_path):
    try:
        with open(file_path, "rb") as file:
            data = file.read()
            decoded_data = data.decode("utf-8")
            # Check if the file contains binary data
            if b'\0' in data:
                return False
            return True
    except UnicodeDecodeError:
        # If a UnicodeDecodeError is raised, the file is not a valid UTF-8 encoded text file
        return False


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--copy", help="Copy the contents to clipboard", action="store_true")
    return parser.parse_args()


def main():
    args = parse_arguments()

    project_root = os.getcwd()
    project_name = os.path.basename(project_root)

    output = f"Tree of project `{project_name}`:\n\n```bash\n"
    output += list_directory(project_root)[:-1] + "\n```\n\n"

    for root, dirs, files in os.walk(project_root):
        # Skip directories in IGNORE_DIRS set
        if any(ignore_dir in root for ignore_dir in IGNORE_DIRS):
            continue

        for file in files:
            file_path = os.path.join(root, file)

            if is_utf8_text_file(file_path):
                ext = os.path.splitext(file_path)[1]
                output += f"Contents of `{os.path.join(project_name, file)}`:\n\n```{EXTENSIONS.get(ext, '')}"

                if read_file_content(file_path):  # not an empty file, like `__init__.py`
                    output += f"\n{read_file_content(file_path)}\n```\n\n"
                else:
                    output += f"{read_file_content(file_path)}\n```\n\n"

    # remove whitespace
    output = output.strip()

    with open(os.path.join(project_root, "project_structure.txt"), "w") as f:
        f.write(output)

    if args.copy:
        pyperclip.copy(output)
        print("Contents copied to clipboard.")


if __name__ == "__main__":
    main()

```

Contents of `dump-to-text/requirements.txt`:

```
pyperclip==1.8.2

```

Contents of `dump-to-text/README.md`:

```markdown
# ChatGPT Dump to Text Python Script
Adam Owada

Hooray for GPT-4's 128k token limit! This Python script copies all of your project code 
into a text file for easy use with ChatGPT. See the provided `project_structure.txt` 
which is an example of the script ran inside this project.

*Attribution:* ChatGPT helped me with about 80% of the code.

## Usage
- Go to a desired project folder in your terminal and run `$ text`
- A new file named `project_structure.txt` will be created in the root of the project
- This will contain the tree of your project and the contents of all UTF-8 encoded files
- Feel free to add/modify the `IGNORE_DIRS` or `EXTENSIONS` variables inside `text` to ignore specified folders or
add extension mappings
- You can also run `$ text -c` or `$ text --copy` which will create `project_structure.txt` and copy 
the contents to your clipboard

## Install Instructions
1. Clone the repository or download the project as a .zip
2. Create a Python virtual environment
3. pip install from the requirements.txt
4. Make `text` executable: `$ chmod +x text`
5. Modify the shebang line 1 in `text` to point to your virtual environment's interpreter
6. Modify your .bashrc or .zshrc file to add the folder to your $PATH
7. Restart your terminal
8. You can now use `$ text`!

```

Contents of `dump-to-text/.gitignore`:

```
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

.idea/

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

```