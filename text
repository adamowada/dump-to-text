#!/home/adamo/projects/dump-to-text/.venv/bin/python
import os
import argparse
import pyperclip


IGNORE_DIRS = {".venv", "node_modules", ".idea", ".git", ".vscode", ".next"}
IGNORE_FILES = {".env", "package.json",
                "package-lock.json", ".eslintrc.json", ".gitignore"}
IGNORE_EXTENSIONS = {".svg"}

EXTENSIONS = {
    ".py": "python",
    ".md": "markdown",
    ".js": "javascript",
    ".text": "text",
    ".css": "css",
    ".json": "json",
    ".html": "html",
    ".ts": "typescript"  # Added TypeScript extension mapping
}


def list_directory(path, prefix=""):
    tree_str = ""
    files = sorted([f for f in os.listdir(
        path) if not f.startswith(".") and f != "node_modules"])
    num_files = len(files)

    for index, file in enumerate(files):
        file_path = os.path.join(path, file)

        # Determine the correct prefix for the current file or directory
        if index == num_files - 1:
            tree_str += prefix + "└── " + file + "\n"
            next_prefix = prefix + "    "
        else:
            tree_str += prefix + "├── " + file + "\n"
            next_prefix = prefix + "│   "

        # Recursively list subdirectories
        if os.path.isdir(file_path):
            tree_str += list_directory(file_path, next_prefix)

    return tree_str


def read_file_content(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()
    except Exception as e:
        return f"Error reading file: {e}"


def is_utf8_text_file(file_path):
    try:
        with open(file_path, "rb") as file:
            data = file.read()
            # Check if the file contains binary data
            if b'\0' in data:
                return False
            data.decode("utf-8")
            return True
    except UnicodeDecodeError:
        # If a UnicodeDecodeError is raised, the file is not a valid UTF-8 encoded text file
        return False


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-w", "--write", help="Write the contents to `project_structure.txt`", action="store_true")
    return parser.parse_args()


def main():
    args = parse_arguments()

    project_root = os.getcwd()
    project_name = os.path.basename(project_root)

    output = f"Tree of `{project_name}`:\n\n```bash\n"
    output += list_directory(project_root) + "```\n\n"

    for root, dirs, files in os.walk(project_root):
        # Skip directories in IGNORE_DIRS set
        if any(ignore_dir in root for ignore_dir in IGNORE_DIRS):
            continue

        for file in files:
            file_path = os.path.join(root, file)

            # Skip ignored files and extensions
            if file in IGNORE_FILES:
                continue
            _, ext = os.path.splitext(file_path)
            if ext in IGNORE_EXTENSIONS:
                continue

            if is_utf8_text_file(file_path):
                relative_path = os.path.relpath(file_path, project_root)
                file_content = read_file_content(file_path)

                # If this is a JS or TS file, remove commented lines starting with //
                if ext in [".js", ".ts"]:
                    lines = file_content.split("\n")
                    lines = [
                        line for line in lines if not line.strip().startswith("//")]
                    file_content = "\n".join(lines)

                output += f"Contents of `{os.path.join(project_name, relative_path)}`:\n\n```{EXTENSIONS.get(ext, '')}"

                if file_content:
                    output += f"\n{file_content}\n```\n\n"
                else:
                    # If empty or error
                    output += f"{file_content}\n```\n\n"

    # remove trailing whitespace
    output = output.strip()

    pyperclip.copy(output)
    print("Contents copied to clipboard.")

    if args.write:
        with open(os.path.join(project_root, "project_structure.txt"), "w", encoding="utf-8") as f:
            f.write(output)
        print("Contents written to `project_structure.txt`.")


if __name__ == "__main__":
    main()
