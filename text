#!/home/adamo/projects/dump-to-text/.venv/bin/python
import os
import argparse
import pyperclip


IGNORE_DIRS = {".venv", "node_modules", ".idea", ".git", ".vscode"}
EXTENSIONS = {
    ".py": "python",
    ".md": "markdown",
    ".js": "javascript",
    ".text": "text",
    ".css": "css",
    ".json": "json",
    ".html": "html",
}


def list_directory(path, prefix=""):
    tree_str = ""
    files = sorted([f for f in os.listdir(path) if not f.startswith(".") and f != "node_modules"])
    num_files = len(files)

    for index, file in enumerate(files):
        file_path = os.path.join(path, file)

        # Determine the correct prefix for the current file or directory
        if index == num_files - 1:
            tree_str += prefix + "└── " + file + "\n"
            next_prefix = prefix + "    "
        else:
            tree_str += prefix + "├── " + file + "\n"
            next_prefix = prefix + "│   "

        # Recursively list subdirectories
        if os.path.isdir(file_path):
            tree_str += list_directory(file_path, next_prefix)

    return tree_str


def read_file_content(file_path):
    try:
        with open(file_path, "r") as file:
            return file.read()
    except Exception as e:
        return f"Error reading file: {e}"


def is_utf8_text_file(file_path):
    try:
        with open(file_path, "rb") as file:
            data = file.read()
            decoded_data = data.decode("utf-8")
            # Check if the file contains binary data
            if b'\0' in data:
                return False
            return True
    except UnicodeDecodeError:
        # If a UnicodeDecodeError is raised, the file is not a valid UTF-8 encoded text file
        return False


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--copy", help="Copy the contents to clipboard", action="store_true")
    return parser.parse_args()


def main():
    args = parse_arguments()

    project_root = os.getcwd()
    project_name = os.path.basename(project_root)

    output = f"Tree of project `{project_name}`:\n\n```bash\n"
    output += list_directory(project_root)[:-1] + "\n```\n\n"

    for root, dirs, files in os.walk(project_root):
        # Skip directories in IGNORE_DIRS set
        if any(ignore_dir in root for ignore_dir in IGNORE_DIRS):
            continue

        for file in files:
            file_path = os.path.join(root, file)

            if ".env" in file_path:
                continue

            if is_utf8_text_file(file_path):
                ext = os.path.splitext(file_path)[1]
                output += f"Contents of `{os.path.join(project_name, file)}`:\n\n```{EXTENSIONS.get(ext, '')}"

                if read_file_content(file_path):  # not an empty file, like `__init__.py`
                    output += f"\n{read_file_content(file_path)}\n```\n\n"
                else:
                    output += f"{read_file_content(file_path)}\n```\n\n"

    # remove whitespace
    output = output.strip()

    with open(os.path.join(project_root, "project_structure.txt"), "w") as f:
        f.write(output)

    if args.copy:
        pyperclip.copy(output)
        print("Contents copied to clipboard.")


if __name__ == "__main__":
    main()
